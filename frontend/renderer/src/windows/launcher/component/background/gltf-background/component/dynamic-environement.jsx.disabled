import { Sky, Stars } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import React, { useRef, useState } from "react";

import Snow from "./snow";

function DynamicEnvironment() {
  const [time, setTime] = useState(0);
  const sunLightRef = useRef();
  const moonLightRef = useRef();
  const moonMeshRef = useRef();

  // vitesse en rad/s pour 1 cycle = 120s
  const cycleSpeed = (2 * Math.PI) / 120;

  useFrame((state, delta) => {
    setTime((t) => (t + delta * cycleSpeed) % (Math.PI * 2));

    const radius = 100;
    const x = Math.sin(time) * radius;
    const y = Math.cos(time) * radius;

    if (sunLightRef.current) {
      sunLightRef.current.position.set(x, y, 0);
      sunLightRef.current.intensity = Math.max(0, y / radius); // atténuation
    }

    if (moonLightRef.current && moonMeshRef.current) {
      const mx = -x;
      const my = -y;
      moonLightRef.current.position.set(mx, my, 0);
      moonMeshRef.current.position.set(mx, my, 0);

      const moonVisible = my > 0;
      moonLightRef.current.intensity = moonVisible ? 0.3 : 0;
      moonMeshRef.current.visible = moonVisible;
    }
  });

  return (
    <>
      {/* Soleil */}
      <directionalLight
        ref={sunLightRef}
        castShadow
        intensity={1.2}
        shadow-mapSize-width={2048}
        shadow-mapSize-height={2048}
      />

      {/* Lune */}
      <pointLight ref={moonLightRef} intensity={0.3} color="blue" />
      <mesh ref={moonMeshRef}>
        <sphereGeometry args={[2, 32, 32]} />
        <meshStandardMaterial emissive="white" emissiveIntensity={0.6} />
      </mesh>

      {/* Ciel dynamique */}
      <Sky sunPosition={sunLightRef.current?.position.toArray() || [0, 1, 0]} />

      {/* Étoiles */}
      <Stars radius={200} depth={50} count={5000} factor={4} fade />

      {/* Chute */}
      <Snow />
    </>
  );
}

export default DynamicEnvironment;
