name: Launcher Build

on:
  push:
    branches: [main]
    paths:
      - "frontend-electron-launcher/**"

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get version
        id: get_version
        run: echo "version=$(jq -r .version frontend-electron-launcher/package.json)" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          release_name: release ${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: ${{ contains(steps.get_version.outputs.version, 'beta') || contains(steps.get_version.outputs.version, 'alpha') }}

  build-launcher:
    needs: create-release
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-14, ubuntu-latest, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: 22.x

      - name: Set up Python (required for node-gyp in some cases)
        uses: actions/setup-python@v4
        with:
          python-version: 3.x

      - name: Install dependencies
        run: npm install
        working-directory: ./frontend

      - name: Build Electron launcher via custom script
        run: npm run build
        working-directory: ./frontend
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}

  download-global:
    name: Combine & Upload All Artifacts
    needs: [create-release, build-launcher]
    runs-on: ubuntu-latest

    steps:
      - name: Download release assets
        run: |
          gh release download ${{ needs.create-release.outputs.version }} \
            --repo ${{ github.repository }} \
            --dir ./release-assets
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}

      - name: List downloaded files
        run: ls -lh ./release-assets

      - name: Create combined zip without existing zips
        run: |
          cd release-assets
          find . -type f -name '*.zip' -delete
          zip -r ../combined-release.zip .
        shell: bash

      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.create-release.outputs.version }}
          name: Release ${{ needs.create-release.outputs.version }}
          files: |
            ./combined-release.zip
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
